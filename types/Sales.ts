/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ISales {
  export type SaleStruct = {
    end: BigNumberish;
    start: BigNumberish;
    price: BigNumberish;
    wrapperId: BigNumberish;
    seller: AddressLike;
    active: boolean;
  };

  export type SaleStructOutput = [
    end: bigint,
    start: bigint,
    price: bigint,
    wrapperId: bigint,
    seller: string,
    active: boolean
  ] & {
    end: bigint;
    start: bigint;
    price: bigint;
    wrapperId: bigint;
    seller: string;
    active: boolean;
  };

  export type DateStruct = {
    expireListDate: BigNumberish;
    expireUpcomeDate: BigNumberish;
  };

  export type DateStructOutput = [
    expireListDate: bigint,
    expireUpcomeDate: bigint
  ] & { expireListDate: bigint; expireUpcomeDate: bigint };
}

export declare namespace IPayments {
  export type ServiceFeeStruct = {
    operation: BytesLike;
    serviceFees: BigNumberish;
    fiatFees: BigNumberish;
  };

  export type ServiceFeeStructOutput = [
    operation: string,
    serviceFees: bigint,
    fiatFees: bigint
  ] & { operation: string; serviceFees: bigint; fiatFees: bigint };

  export type FeeStruct = {
    name: BytesLike;
    percentage: BigNumberish;
    wallet: AddressLike;
  };

  export type FeeStructOutput = [
    name: string,
    percentage: bigint,
    wallet: string
  ] & { name: string; percentage: bigint; wallet: string };

  export type TransactionFeesStruct = {
    fromFee: BigNumberish;
    toFee: BigNumberish;
    serviceFee: IPayments.ServiceFeeStruct;
    fees: IPayments.FeeStruct[];
  };

  export type TransactionFeesStructOutput = [
    fromFee: bigint,
    toFee: bigint,
    serviceFee: IPayments.ServiceFeeStructOutput,
    fees: IPayments.FeeStructOutput[]
  ] & {
    fromFee: bigint;
    toFee: bigint;
    serviceFee: IPayments.ServiceFeeStructOutput;
    fees: IPayments.FeeStructOutput[];
  };
}

export declare namespace SalesBase {
  export type ListOutputsStruct = {
    wrapperId: BigNumberish;
    price: BigNumberish;
    erc20: AddressLike;
  };

  export type ListOutputsStructOutput = [
    wrapperId: bigint,
    price: bigint,
    erc20: string
  ] & { wrapperId: bigint; price: bigint; erc20: string };
}

export interface SalesInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "buy"
      | "getActiveSchedules"
      | "getAllDurationsPaginated"
      | "getDomainSeparator"
      | "getDuration"
      | "getListingDelay"
      | "getNextScheduleTime"
      | "getNonce"
      | "getSale"
      | "getSalesByCollection"
      | "getSalesByCollectionPaginated"
      | "getSalesBySellerPaginated"
      | "getSchedule"
      | "initialize"
      | "list"
      | "pause"
      | "paused"
      | "proxiableUUID"
      | "removeSchedules"
      | "renew"
      | "setDurations"
      | "setListingDelay"
      | "setSchedules"
      | "unpause"
      | "upgradeToAndCall"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Buy"
      | "DurationSet"
      | "Initialized"
      | "List"
      | "ListingCancelled"
      | "ListingDelayUpdated"
      | "NonceUsed"
      | "Paused"
      | "Renew"
      | "RenewCancelled"
      | "RolesSet"
      | "ScheduleRemoved"
      | "ScheduleSet"
      | "Unpaused"
      | "Upgraded"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      boolean,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveSchedules",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllDurationsPaginated",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getListingDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextScheduleTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSalesByCollection",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSalesByCollectionPaginated",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSalesBySellerPaginated",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSchedule",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "list",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeSchedules",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renew",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDurations",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setListingDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSchedules",
    values: [BigNumberish[], BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      boolean,
      AddressLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActiveSchedules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllDurationsPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDomainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextScheduleTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSalesByCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSalesByCollectionPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSalesBySellerPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "list", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSchedules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "renew", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDurations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setListingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSchedules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace BuyEvent {
  export type InputTuple = [
    wallet: AddressLike,
    salesId: BigNumberish,
    fees: IPayments.TransactionFeesStruct
  ];
  export type OutputTuple = [
    wallet: string,
    salesId: bigint,
    fees: IPayments.TransactionFeesStructOutput
  ];
  export interface OutputObject {
    wallet: string;
    salesId: bigint;
    fees: IPayments.TransactionFeesStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DurationSetEvent {
  export type InputTuple = [durationId: BigNumberish, duration: BigNumberish];
  export type OutputTuple = [durationId: bigint, duration: bigint];
  export interface OutputObject {
    durationId: bigint;
    duration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListEvent {
  export type InputTuple = [
    wallet: AddressLike,
    salesId: BigNumberish,
    date: ISales.DateStruct,
    fee: IPayments.ServiceFeeStruct,
    output: SalesBase.ListOutputsStruct
  ];
  export type OutputTuple = [
    wallet: string,
    salesId: bigint,
    date: ISales.DateStructOutput,
    fee: IPayments.ServiceFeeStructOutput,
    output: SalesBase.ListOutputsStructOutput
  ];
  export interface OutputObject {
    wallet: string;
    salesId: bigint;
    date: ISales.DateStructOutput;
    fee: IPayments.ServiceFeeStructOutput;
    output: SalesBase.ListOutputsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListingCancelledEvent {
  export type InputTuple = [
    salesId: BigNumberish,
    seller: AddressLike,
    operator: AddressLike
  ];
  export type OutputTuple = [salesId: bigint, seller: string, operator: string];
  export interface OutputObject {
    salesId: bigint;
    seller: string;
    operator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListingDelayUpdatedEvent {
  export type InputTuple = [oldDelay: BigNumberish, newDelay: BigNumberish];
  export type OutputTuple = [oldDelay: bigint, newDelay: bigint];
  export interface OutputObject {
    oldDelay: bigint;
    newDelay: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NonceUsedEvent {
  export type InputTuple = [user: AddressLike, nonce: BigNumberish];
  export type OutputTuple = [user: string, nonce: bigint];
  export interface OutputObject {
    user: string;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RenewEvent {
  export type InputTuple = [
    wallet: AddressLike,
    salesId: BigNumberish,
    date: ISales.DateStruct,
    fee: IPayments.ServiceFeeStruct
  ];
  export type OutputTuple = [
    wallet: string,
    salesId: bigint,
    date: ISales.DateStructOutput,
    fee: IPayments.ServiceFeeStructOutput
  ];
  export interface OutputObject {
    wallet: string;
    salesId: bigint;
    date: ISales.DateStructOutput;
    fee: IPayments.ServiceFeeStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RenewCancelledEvent {
  export type InputTuple = [
    salesId: BigNumberish,
    seller: AddressLike,
    operator: AddressLike
  ];
  export type OutputTuple = [salesId: bigint, seller: string, operator: string];
  export interface OutputObject {
    salesId: bigint;
    seller: string;
    operator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RolesSetEvent {
  export type InputTuple = [roles: AddressLike];
  export type OutputTuple = [roles: string];
  export interface OutputObject {
    roles: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScheduleRemovedEvent {
  export type InputTuple = [scheduleId: BigNumberish];
  export type OutputTuple = [scheduleId: bigint];
  export interface OutputObject {
    scheduleId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScheduleSetEvent {
  export type InputTuple = [
    scheduleId: BigNumberish,
    dayOfWeek: BigNumberish,
    hour: BigNumberish,
    minute: BigNumberish
  ];
  export type OutputTuple = [
    scheduleId: bigint,
    dayOfWeek: bigint,
    hour: bigint,
    minute: bigint
  ];
  export interface OutputObject {
    scheduleId: bigint;
    dayOfWeek: bigint;
    hour: bigint;
    minute: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    wallet: AddressLike,
    salesId: BigNumberish,
    fee: IPayments.ServiceFeeStruct
  ];
  export type OutputTuple = [
    wallet: string,
    salesId: bigint,
    fee: IPayments.ServiceFeeStructOutput
  ];
  export interface OutputObject {
    wallet: string;
    salesId: bigint;
    fee: IPayments.ServiceFeeStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Sales extends BaseContract {
  connect(runner?: ContractRunner | null): Sales;
  waitForDeployment(): Promise<this>;

  interface: SalesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  buy: TypedContractMethod<
    [
      buyer: AddressLike,
      nonce: BigNumberish,
      expiry: BigNumberish,
      signature: BytesLike,
      directSaleId: BigNumberish,
      saleId: BigNumberish,
      isFiat: boolean,
      erc20: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getActiveSchedules: TypedContractMethod<
    [],
    [
      [bigint[], bigint[], bigint[], bigint[]] & {
        scheduleIds: bigint[];
        dayWeeks: bigint[];
        hourValues: bigint[];
        minuteValues: bigint[];
      }
    ],
    "view"
  >;

  getAllDurationsPaginated: TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [
      [bigint[], bigint[], bigint] & {
        durationIds: bigint[];
        durationValues: bigint[];
        total: bigint;
      }
    ],
    "view"
  >;

  getDomainSeparator: TypedContractMethod<[], [string], "view">;

  getDuration: TypedContractMethod<
    [durationId: BigNumberish],
    [bigint],
    "view"
  >;

  getListingDelay: TypedContractMethod<[], [bigint], "view">;

  getNextScheduleTime: TypedContractMethod<[], [bigint], "view">;

  getNonce: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getSale: TypedContractMethod<
    [saleId: BigNumberish],
    [ISales.SaleStructOutput],
    "view"
  >;

  getSalesByCollection: TypedContractMethod<
    [collection: BytesLike],
    [ISales.SaleStructOutput[]],
    "view"
  >;

  getSalesByCollectionPaginated: TypedContractMethod<
    [collection: BytesLike, offset: BigNumberish, limit: BigNumberish],
    [
      [ISales.SaleStructOutput[], bigint] & {
        sales: ISales.SaleStructOutput[];
        total: bigint;
      }
    ],
    "view"
  >;

  getSalesBySellerPaginated: TypedContractMethod<
    [seller: AddressLike, offset: BigNumberish, limit: BigNumberish],
    [[bigint[], bigint] & { saleIds: bigint[]; total: bigint }],
    "view"
  >;

  getSchedule: TypedContractMethod<
    [scheduleId: BigNumberish],
    [
      [bigint, bigint, bigint, boolean] & {
        dayOfWeek: bigint;
        hourValue: bigint;
        minuteValue: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  initialize: TypedContractMethod<[_roles: AddressLike], [void], "nonpayable">;

  list: TypedContractMethod<
    [
      seller: AddressLike,
      nonce: BigNumberish,
      expiry: BigNumberish,
      signature: BytesLike,
      wrapperId: BigNumberish,
      directSaleId: BigNumberish,
      isFiat: boolean,
      price: BigNumberish,
      expireType: BigNumberish,
      erc20: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  removeSchedules: TypedContractMethod<
    [scheduleIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  renew: TypedContractMethod<
    [
      seller: AddressLike,
      nonce: BigNumberish,
      expiry: BigNumberish,
      signature: BytesLike,
      directSaleId: BigNumberish,
      saleId: BigNumberish,
      isFiat: boolean,
      expireType: BigNumberish,
      erc20: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  setDurations: TypedContractMethod<
    [durationIds: BigNumberish[], durations: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  setListingDelay: TypedContractMethod<
    [delay: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSchedules: TypedContractMethod<
    [
      scheduleIds: BigNumberish[],
      daysOfWeek: BigNumberish[],
      hourValues: BigNumberish[],
      minuteValues: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  withdraw: TypedContractMethod<
    [
      seller: AddressLike,
      nonce: BigNumberish,
      expiry: BigNumberish,
      signature: BytesLike,
      directSaleId: BigNumberish,
      saleId: BigNumberish,
      isFiat: boolean,
      erc20: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "buy"
  ): TypedContractMethod<
    [
      buyer: AddressLike,
      nonce: BigNumberish,
      expiry: BigNumberish,
      signature: BytesLike,
      directSaleId: BigNumberish,
      saleId: BigNumberish,
      isFiat: boolean,
      erc20: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getActiveSchedules"
  ): TypedContractMethod<
    [],
    [
      [bigint[], bigint[], bigint[], bigint[]] & {
        scheduleIds: bigint[];
        dayWeeks: bigint[];
        hourValues: bigint[];
        minuteValues: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllDurationsPaginated"
  ): TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [
      [bigint[], bigint[], bigint] & {
        durationIds: bigint[];
        durationValues: bigint[];
        total: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDomainSeparator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getDuration"
  ): TypedContractMethod<[durationId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getListingDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNextScheduleTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNonce"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSale"
  ): TypedContractMethod<
    [saleId: BigNumberish],
    [ISales.SaleStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSalesByCollection"
  ): TypedContractMethod<
    [collection: BytesLike],
    [ISales.SaleStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSalesByCollectionPaginated"
  ): TypedContractMethod<
    [collection: BytesLike, offset: BigNumberish, limit: BigNumberish],
    [
      [ISales.SaleStructOutput[], bigint] & {
        sales: ISales.SaleStructOutput[];
        total: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSalesBySellerPaginated"
  ): TypedContractMethod<
    [seller: AddressLike, offset: BigNumberish, limit: BigNumberish],
    [[bigint[], bigint] & { saleIds: bigint[]; total: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSchedule"
  ): TypedContractMethod<
    [scheduleId: BigNumberish],
    [
      [bigint, bigint, bigint, boolean] & {
        dayOfWeek: bigint;
        hourValue: bigint;
        minuteValue: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_roles: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "list"
  ): TypedContractMethod<
    [
      seller: AddressLike,
      nonce: BigNumberish,
      expiry: BigNumberish,
      signature: BytesLike,
      wrapperId: BigNumberish,
      directSaleId: BigNumberish,
      isFiat: boolean,
      price: BigNumberish,
      expireType: BigNumberish,
      erc20: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeSchedules"
  ): TypedContractMethod<[scheduleIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renew"
  ): TypedContractMethod<
    [
      seller: AddressLike,
      nonce: BigNumberish,
      expiry: BigNumberish,
      signature: BytesLike,
      directSaleId: BigNumberish,
      saleId: BigNumberish,
      isFiat: boolean,
      expireType: BigNumberish,
      erc20: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDurations"
  ): TypedContractMethod<
    [durationIds: BigNumberish[], durations: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setListingDelay"
  ): TypedContractMethod<[delay: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSchedules"
  ): TypedContractMethod<
    [
      scheduleIds: BigNumberish[],
      daysOfWeek: BigNumberish[],
      hourValues: BigNumberish[],
      minuteValues: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [
      seller: AddressLike,
      nonce: BigNumberish,
      expiry: BigNumberish,
      signature: BytesLike,
      directSaleId: BigNumberish,
      saleId: BigNumberish,
      isFiat: boolean,
      erc20: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Buy"
  ): TypedContractEvent<
    BuyEvent.InputTuple,
    BuyEvent.OutputTuple,
    BuyEvent.OutputObject
  >;
  getEvent(
    key: "DurationSet"
  ): TypedContractEvent<
    DurationSetEvent.InputTuple,
    DurationSetEvent.OutputTuple,
    DurationSetEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "List"
  ): TypedContractEvent<
    ListEvent.InputTuple,
    ListEvent.OutputTuple,
    ListEvent.OutputObject
  >;
  getEvent(
    key: "ListingCancelled"
  ): TypedContractEvent<
    ListingCancelledEvent.InputTuple,
    ListingCancelledEvent.OutputTuple,
    ListingCancelledEvent.OutputObject
  >;
  getEvent(
    key: "ListingDelayUpdated"
  ): TypedContractEvent<
    ListingDelayUpdatedEvent.InputTuple,
    ListingDelayUpdatedEvent.OutputTuple,
    ListingDelayUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "NonceUsed"
  ): TypedContractEvent<
    NonceUsedEvent.InputTuple,
    NonceUsedEvent.OutputTuple,
    NonceUsedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Renew"
  ): TypedContractEvent<
    RenewEvent.InputTuple,
    RenewEvent.OutputTuple,
    RenewEvent.OutputObject
  >;
  getEvent(
    key: "RenewCancelled"
  ): TypedContractEvent<
    RenewCancelledEvent.InputTuple,
    RenewCancelledEvent.OutputTuple,
    RenewCancelledEvent.OutputObject
  >;
  getEvent(
    key: "RolesSet"
  ): TypedContractEvent<
    RolesSetEvent.InputTuple,
    RolesSetEvent.OutputTuple,
    RolesSetEvent.OutputObject
  >;
  getEvent(
    key: "ScheduleRemoved"
  ): TypedContractEvent<
    ScheduleRemovedEvent.InputTuple,
    ScheduleRemovedEvent.OutputTuple,
    ScheduleRemovedEvent.OutputObject
  >;
  getEvent(
    key: "ScheduleSet"
  ): TypedContractEvent<
    ScheduleSetEvent.InputTuple,
    ScheduleSetEvent.OutputTuple,
    ScheduleSetEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "Buy(address,uint256,tuple)": TypedContractEvent<
      BuyEvent.InputTuple,
      BuyEvent.OutputTuple,
      BuyEvent.OutputObject
    >;
    Buy: TypedContractEvent<
      BuyEvent.InputTuple,
      BuyEvent.OutputTuple,
      BuyEvent.OutputObject
    >;

    "DurationSet(uint256,uint256)": TypedContractEvent<
      DurationSetEvent.InputTuple,
      DurationSetEvent.OutputTuple,
      DurationSetEvent.OutputObject
    >;
    DurationSet: TypedContractEvent<
      DurationSetEvent.InputTuple,
      DurationSetEvent.OutputTuple,
      DurationSetEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "List(address,uint256,tuple,tuple,tuple)": TypedContractEvent<
      ListEvent.InputTuple,
      ListEvent.OutputTuple,
      ListEvent.OutputObject
    >;
    List: TypedContractEvent<
      ListEvent.InputTuple,
      ListEvent.OutputTuple,
      ListEvent.OutputObject
    >;

    "ListingCancelled(uint256,address,address)": TypedContractEvent<
      ListingCancelledEvent.InputTuple,
      ListingCancelledEvent.OutputTuple,
      ListingCancelledEvent.OutputObject
    >;
    ListingCancelled: TypedContractEvent<
      ListingCancelledEvent.InputTuple,
      ListingCancelledEvent.OutputTuple,
      ListingCancelledEvent.OutputObject
    >;

    "ListingDelayUpdated(uint256,uint256)": TypedContractEvent<
      ListingDelayUpdatedEvent.InputTuple,
      ListingDelayUpdatedEvent.OutputTuple,
      ListingDelayUpdatedEvent.OutputObject
    >;
    ListingDelayUpdated: TypedContractEvent<
      ListingDelayUpdatedEvent.InputTuple,
      ListingDelayUpdatedEvent.OutputTuple,
      ListingDelayUpdatedEvent.OutputObject
    >;

    "NonceUsed(address,uint256)": TypedContractEvent<
      NonceUsedEvent.InputTuple,
      NonceUsedEvent.OutputTuple,
      NonceUsedEvent.OutputObject
    >;
    NonceUsed: TypedContractEvent<
      NonceUsedEvent.InputTuple,
      NonceUsedEvent.OutputTuple,
      NonceUsedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Renew(address,uint256,tuple,tuple)": TypedContractEvent<
      RenewEvent.InputTuple,
      RenewEvent.OutputTuple,
      RenewEvent.OutputObject
    >;
    Renew: TypedContractEvent<
      RenewEvent.InputTuple,
      RenewEvent.OutputTuple,
      RenewEvent.OutputObject
    >;

    "RenewCancelled(uint256,address,address)": TypedContractEvent<
      RenewCancelledEvent.InputTuple,
      RenewCancelledEvent.OutputTuple,
      RenewCancelledEvent.OutputObject
    >;
    RenewCancelled: TypedContractEvent<
      RenewCancelledEvent.InputTuple,
      RenewCancelledEvent.OutputTuple,
      RenewCancelledEvent.OutputObject
    >;

    "RolesSet(address)": TypedContractEvent<
      RolesSetEvent.InputTuple,
      RolesSetEvent.OutputTuple,
      RolesSetEvent.OutputObject
    >;
    RolesSet: TypedContractEvent<
      RolesSetEvent.InputTuple,
      RolesSetEvent.OutputTuple,
      RolesSetEvent.OutputObject
    >;

    "ScheduleRemoved(uint256)": TypedContractEvent<
      ScheduleRemovedEvent.InputTuple,
      ScheduleRemovedEvent.OutputTuple,
      ScheduleRemovedEvent.OutputObject
    >;
    ScheduleRemoved: TypedContractEvent<
      ScheduleRemovedEvent.InputTuple,
      ScheduleRemovedEvent.OutputTuple,
      ScheduleRemovedEvent.OutputObject
    >;

    "ScheduleSet(uint256,uint8,uint8,uint8)": TypedContractEvent<
      ScheduleSetEvent.InputTuple,
      ScheduleSetEvent.OutputTuple,
      ScheduleSetEvent.OutputObject
    >;
    ScheduleSet: TypedContractEvent<
      ScheduleSetEvent.InputTuple,
      ScheduleSetEvent.OutputTuple,
      ScheduleSetEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "Withdraw(address,uint256,tuple)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
