/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface USDCApprovalProxyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "allowance"
      | "getDomainSeparator"
      | "getNonce"
      | "initialize"
      | "paymentsAllowance"
      | "paymentsContract"
      | "permitForPayments"
      | "permitUSDC"
      | "proxiableUUID"
      | "setPaymentsContract"
      | "setUSDCToken"
      | "upgradeToAndCall"
      | "usdcToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "NonceUsed"
      | "PaymentsContractUpdated"
      | "RolesSet"
      | "USDCPermitForwarded"
      | "USDCTokenUpdated"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "paymentsAllowance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "paymentsContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permitForPayments",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permitUSDC",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentsContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setUSDCToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDomainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentsAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitForPayments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "permitUSDC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUSDCToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NonceUsedEvent {
  export type InputTuple = [user: AddressLike, nonce: BigNumberish];
  export type OutputTuple = [user: string, nonce: bigint];
  export interface OutputObject {
    user: string;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentsContractUpdatedEvent {
  export type InputTuple = [oldPayments: AddressLike, newPayments: AddressLike];
  export type OutputTuple = [oldPayments: string, newPayments: string];
  export interface OutputObject {
    oldPayments: string;
    newPayments: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RolesSetEvent {
  export type InputTuple = [roles: AddressLike];
  export type OutputTuple = [roles: string];
  export interface OutputObject {
    roles: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace USDCPermitForwardedEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish,
    success: boolean
  ];
  export type OutputTuple = [
    owner: string,
    spender: string,
    value: bigint,
    success: boolean
  ];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace USDCTokenUpdatedEvent {
  export type InputTuple = [oldToken: AddressLike, newToken: AddressLike];
  export type OutputTuple = [oldToken: string, newToken: string];
  export interface OutputObject {
    oldToken: string;
    newToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface USDCApprovalProxy extends BaseContract {
  connect(runner?: ContractRunner | null): USDCApprovalProxy;
  waitForDeployment(): Promise<this>;

  interface: USDCApprovalProxyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  getDomainSeparator: TypedContractMethod<[], [string], "view">;

  getNonce: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  initialize: TypedContractMethod<
    [
      _roles: AddressLike,
      _usdcToken: AddressLike,
      _paymentsContract: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  paymentsAllowance: TypedContractMethod<
    [owner: AddressLike],
    [bigint],
    "view"
  >;

  paymentsContract: TypedContractMethod<[], [string], "view">;

  permitForPayments: TypedContractMethod<
    [
      owner: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  permitUSDC: TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  setPaymentsContract: TypedContractMethod<
    [_newPaymentsContract: AddressLike],
    [void],
    "nonpayable"
  >;

  setUSDCToken: TypedContractMethod<
    [_newUsdcToken: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  usdcToken: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDomainSeparator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getNonce"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _roles: AddressLike,
      _usdcToken: AddressLike,
      _paymentsContract: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "paymentsAllowance"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "paymentsContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "permitForPayments"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "permitUSDC"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setPaymentsContract"
  ): TypedContractMethod<
    [_newPaymentsContract: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUSDCToken"
  ): TypedContractMethod<[_newUsdcToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "usdcToken"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "NonceUsed"
  ): TypedContractEvent<
    NonceUsedEvent.InputTuple,
    NonceUsedEvent.OutputTuple,
    NonceUsedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentsContractUpdated"
  ): TypedContractEvent<
    PaymentsContractUpdatedEvent.InputTuple,
    PaymentsContractUpdatedEvent.OutputTuple,
    PaymentsContractUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RolesSet"
  ): TypedContractEvent<
    RolesSetEvent.InputTuple,
    RolesSetEvent.OutputTuple,
    RolesSetEvent.OutputObject
  >;
  getEvent(
    key: "USDCPermitForwarded"
  ): TypedContractEvent<
    USDCPermitForwardedEvent.InputTuple,
    USDCPermitForwardedEvent.OutputTuple,
    USDCPermitForwardedEvent.OutputObject
  >;
  getEvent(
    key: "USDCTokenUpdated"
  ): TypedContractEvent<
    USDCTokenUpdatedEvent.InputTuple,
    USDCTokenUpdatedEvent.OutputTuple,
    USDCTokenUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "NonceUsed(address,uint256)": TypedContractEvent<
      NonceUsedEvent.InputTuple,
      NonceUsedEvent.OutputTuple,
      NonceUsedEvent.OutputObject
    >;
    NonceUsed: TypedContractEvent<
      NonceUsedEvent.InputTuple,
      NonceUsedEvent.OutputTuple,
      NonceUsedEvent.OutputObject
    >;

    "PaymentsContractUpdated(address,address)": TypedContractEvent<
      PaymentsContractUpdatedEvent.InputTuple,
      PaymentsContractUpdatedEvent.OutputTuple,
      PaymentsContractUpdatedEvent.OutputObject
    >;
    PaymentsContractUpdated: TypedContractEvent<
      PaymentsContractUpdatedEvent.InputTuple,
      PaymentsContractUpdatedEvent.OutputTuple,
      PaymentsContractUpdatedEvent.OutputObject
    >;

    "RolesSet(address)": TypedContractEvent<
      RolesSetEvent.InputTuple,
      RolesSetEvent.OutputTuple,
      RolesSetEvent.OutputObject
    >;
    RolesSet: TypedContractEvent<
      RolesSetEvent.InputTuple,
      RolesSetEvent.OutputTuple,
      RolesSetEvent.OutputObject
    >;

    "USDCPermitForwarded(address,address,uint256,bool)": TypedContractEvent<
      USDCPermitForwardedEvent.InputTuple,
      USDCPermitForwardedEvent.OutputTuple,
      USDCPermitForwardedEvent.OutputObject
    >;
    USDCPermitForwarded: TypedContractEvent<
      USDCPermitForwardedEvent.InputTuple,
      USDCPermitForwardedEvent.OutputTuple,
      USDCPermitForwardedEvent.OutputObject
    >;

    "USDCTokenUpdated(address,address)": TypedContractEvent<
      USDCTokenUpdatedEvent.InputTuple,
      USDCTokenUpdatedEvent.OutputTuple,
      USDCTokenUpdatedEvent.OutputObject
    >;
    USDCTokenUpdated: TypedContractEvent<
      USDCTokenUpdatedEvent.InputTuple,
      USDCTokenUpdatedEvent.OutputTuple,
      USDCTokenUpdatedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
