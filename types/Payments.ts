/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IPayments {
  export type FeeStruct = {
    name: BytesLike;
    percentage: BigNumberish;
    wallet: AddressLike;
  };

  export type FeeStructOutput = [
    name: string,
    percentage: bigint,
    wallet: string
  ] & { name: string; percentage: bigint; wallet: string };

  export type MembershipFeeConfigStruct = {
    membershipId: BigNumberish;
    sellerFee: BigNumberish;
    buyerFee: BigNumberish;
  };

  export type MembershipFeeConfigStructOutput = [
    membershipId: bigint,
    sellerFee: bigint,
    buyerFee: bigint
  ] & { membershipId: bigint; sellerFee: bigint; buyerFee: bigint };

  export type ServiceFeeStruct = {
    operation: BytesLike;
    serviceFees: BigNumberish;
    fiatFees: BigNumberish;
  };

  export type ServiceFeeStructOutput = [
    operation: string,
    serviceFees: bigint,
    fiatFees: bigint
  ] & { operation: string; serviceFees: bigint; fiatFees: bigint };

  export type TransactionFeesStruct = {
    fromFee: BigNumberish;
    toFee: BigNumberish;
    serviceFee: IPayments.ServiceFeeStruct;
    fees: IPayments.FeeStruct[];
  };

  export type TransactionFeesStructOutput = [
    fromFee: bigint,
    toFee: bigint,
    serviceFee: IPayments.ServiceFeeStructOutput,
    fees: IPayments.FeeStructOutput[]
  ] & {
    fromFee: bigint;
    toFee: bigint;
    serviceFee: IPayments.ServiceFeeStructOutput;
    fees: IPayments.FeeStructOutput[];
  };
}

export interface PaymentsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "addFee"
      | "getDomainSeparator"
      | "getFee"
      | "getFees"
      | "getMembershipFees"
      | "getNonce"
      | "initialize"
      | "pause"
      | "paused"
      | "proxiableUUID"
      | "removeFee"
      | "send"
      | "setFiatFeePercentage"
      | "setMembershipFees"
      | "setServiceFee"
      | "splitFees"
      | "splitServiceFee"
      | "unpause"
      | "updateFee"
      | "updateTreasuryAddress"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FeeAdded"
      | "FeeRemoved"
      | "FeeUpdated"
      | "FeesProcessed"
      | "FiatFeePercentageUpdated"
      | "Initialized"
      | "MembershipFeesUpdated"
      | "NonceUsed"
      | "Paused"
      | "PaymentProcessed"
      | "RolesSet"
      | "Send"
      | "Unpaused"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addFee",
    values: [BytesLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getFee", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "getFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMembershipFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      IPayments.MembershipFeeConfigStruct[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeFee",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [
      BigNumberish,
      BigNumberish,
      BytesLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFiatFeePercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMembershipFees",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setServiceFee",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "splitFees",
    values: [AddressLike, BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "splitServiceFee",
    values: [BytesLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateFee",
    values: [BytesLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTreasuryAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDomainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMembershipFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFiatFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMembershipFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setServiceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "splitFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "splitServiceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateTreasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
}

export namespace FeeAddedEvent {
  export type InputTuple = [
    name: BytesLike,
    percentage: BigNumberish,
    wallet: AddressLike
  ];
  export type OutputTuple = [name: string, percentage: bigint, wallet: string];
  export interface OutputObject {
    name: string;
    percentage: bigint;
    wallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeRemovedEvent {
  export type InputTuple = [name: BytesLike];
  export type OutputTuple = [name: string];
  export interface OutputObject {
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeUpdatedEvent {
  export type InputTuple = [
    name: BytesLike,
    percentage: BigNumberish,
    wallet: AddressLike
  ];
  export type OutputTuple = [name: string, percentage: bigint, wallet: string];
  export interface OutputObject {
    name: string;
    percentage: bigint;
    wallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesProcessedEvent {
  export type InputTuple = [
    transactionId: BigNumberish,
    fees: IPayments.TransactionFeesStruct
  ];
  export type OutputTuple = [
    transactionId: bigint,
    fees: IPayments.TransactionFeesStructOutput
  ];
  export interface OutputObject {
    transactionId: bigint;
    fees: IPayments.TransactionFeesStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FiatFeePercentageUpdatedEvent {
  export type InputTuple = [
    oldPercentage: BigNumberish,
    newPercentage: BigNumberish
  ];
  export type OutputTuple = [oldPercentage: bigint, newPercentage: bigint];
  export interface OutputObject {
    oldPercentage: bigint;
    newPercentage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MembershipFeesUpdatedEvent {
  export type InputTuple = [
    membershipId: BigNumberish,
    sellerFee: BigNumberish,
    buyerFee: BigNumberish
  ];
  export type OutputTuple = [
    membershipId: bigint,
    sellerFee: bigint,
    buyerFee: bigint
  ];
  export interface OutputObject {
    membershipId: bigint;
    sellerFee: bigint;
    buyerFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NonceUsedEvent {
  export type InputTuple = [user: AddressLike, nonce: BigNumberish];
  export type OutputTuple = [user: string, nonce: bigint];
  export interface OutputObject {
    user: string;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentProcessedEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, amount: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RolesSetEvent {
  export type InputTuple = [roles: AddressLike];
  export type OutputTuple = [roles: string];
  export interface OutputObject {
    roles: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SendEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, amount: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Payments extends BaseContract {
  connect(runner?: ContractRunner | null): Payments;
  waitForDeployment(): Promise<this>;

  interface: PaymentsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  addFee: TypedContractMethod<
    [name: BytesLike, percentage: BigNumberish, wallet: AddressLike],
    [void],
    "nonpayable"
  >;

  getDomainSeparator: TypedContractMethod<[], [string], "view">;

  getFee: TypedContractMethod<
    [name: BytesLike],
    [IPayments.FeeStructOutput],
    "view"
  >;

  getFees: TypedContractMethod<[], [IPayments.FeeStructOutput[]], "view">;

  getMembershipFees: TypedContractMethod<
    [membershipId: BigNumberish],
    [[bigint, bigint] & { sellerFee: bigint; buyerFee: bigint }],
    "view"
  >;

  getNonce: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  initialize: TypedContractMethod<
    [
      _roles: AddressLike,
      _treasuryAddress: AddressLike,
      _fiatFeePercentage: BigNumberish,
      _initialMembershipFees: IPayments.MembershipFeeConfigStruct[]
    ],
    [void],
    "nonpayable"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  removeFee: TypedContractMethod<[name: BytesLike], [void], "nonpayable">;

  send: TypedContractMethod<
    [
      nonce: BigNumberish,
      expiry: BigNumberish,
      signature: BytesLike,
      erc20: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setFiatFeePercentage: TypedContractMethod<
    [newPercentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMembershipFees: TypedContractMethod<
    [
      membershipId: BigNumberish,
      sellerFee: BigNumberish,
      buyerFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setServiceFee: TypedContractMethod<
    [operation: BytesLike, fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  splitFees: TypedContractMethod<
    [
      erc20: AddressLike,
      transactionId: BigNumberish,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish
    ],
    [IPayments.TransactionFeesStructOutput],
    "nonpayable"
  >;

  splitServiceFee: TypedContractMethod<
    [operation: BytesLike, wallet: AddressLike, erc20: AddressLike],
    [IPayments.ServiceFeeStructOutput],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateFee: TypedContractMethod<
    [name: BytesLike, percentage: BigNumberish, wallet: AddressLike],
    [void],
    "nonpayable"
  >;

  updateTreasuryAddress: TypedContractMethod<
    [newTreasuryAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addFee"
  ): TypedContractMethod<
    [name: BytesLike, percentage: BigNumberish, wallet: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getDomainSeparator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getFee"
  ): TypedContractMethod<
    [name: BytesLike],
    [IPayments.FeeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFees"
  ): TypedContractMethod<[], [IPayments.FeeStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getMembershipFees"
  ): TypedContractMethod<
    [membershipId: BigNumberish],
    [[bigint, bigint] & { sellerFee: bigint; buyerFee: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNonce"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _roles: AddressLike,
      _treasuryAddress: AddressLike,
      _fiatFeePercentage: BigNumberish,
      _initialMembershipFees: IPayments.MembershipFeeConfigStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeFee"
  ): TypedContractMethod<[name: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "send"
  ): TypedContractMethod<
    [
      nonce: BigNumberish,
      expiry: BigNumberish,
      signature: BytesLike,
      erc20: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFiatFeePercentage"
  ): TypedContractMethod<[newPercentage: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMembershipFees"
  ): TypedContractMethod<
    [
      membershipId: BigNumberish,
      sellerFee: BigNumberish,
      buyerFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setServiceFee"
  ): TypedContractMethod<
    [operation: BytesLike, fee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "splitFees"
  ): TypedContractMethod<
    [
      erc20: AddressLike,
      transactionId: BigNumberish,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish
    ],
    [IPayments.TransactionFeesStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "splitServiceFee"
  ): TypedContractMethod<
    [operation: BytesLike, wallet: AddressLike, erc20: AddressLike],
    [IPayments.ServiceFeeStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFee"
  ): TypedContractMethod<
    [name: BytesLike, percentage: BigNumberish, wallet: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateTreasuryAddress"
  ): TypedContractMethod<
    [newTreasuryAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "FeeAdded"
  ): TypedContractEvent<
    FeeAddedEvent.InputTuple,
    FeeAddedEvent.OutputTuple,
    FeeAddedEvent.OutputObject
  >;
  getEvent(
    key: "FeeRemoved"
  ): TypedContractEvent<
    FeeRemovedEvent.InputTuple,
    FeeRemovedEvent.OutputTuple,
    FeeRemovedEvent.OutputObject
  >;
  getEvent(
    key: "FeeUpdated"
  ): TypedContractEvent<
    FeeUpdatedEvent.InputTuple,
    FeeUpdatedEvent.OutputTuple,
    FeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FeesProcessed"
  ): TypedContractEvent<
    FeesProcessedEvent.InputTuple,
    FeesProcessedEvent.OutputTuple,
    FeesProcessedEvent.OutputObject
  >;
  getEvent(
    key: "FiatFeePercentageUpdated"
  ): TypedContractEvent<
    FiatFeePercentageUpdatedEvent.InputTuple,
    FiatFeePercentageUpdatedEvent.OutputTuple,
    FiatFeePercentageUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MembershipFeesUpdated"
  ): TypedContractEvent<
    MembershipFeesUpdatedEvent.InputTuple,
    MembershipFeesUpdatedEvent.OutputTuple,
    MembershipFeesUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "NonceUsed"
  ): TypedContractEvent<
    NonceUsedEvent.InputTuple,
    NonceUsedEvent.OutputTuple,
    NonceUsedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentProcessed"
  ): TypedContractEvent<
    PaymentProcessedEvent.InputTuple,
    PaymentProcessedEvent.OutputTuple,
    PaymentProcessedEvent.OutputObject
  >;
  getEvent(
    key: "RolesSet"
  ): TypedContractEvent<
    RolesSetEvent.InputTuple,
    RolesSetEvent.OutputTuple,
    RolesSetEvent.OutputObject
  >;
  getEvent(
    key: "Send"
  ): TypedContractEvent<
    SendEvent.InputTuple,
    SendEvent.OutputTuple,
    SendEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "FeeAdded(bytes32,uint256,address)": TypedContractEvent<
      FeeAddedEvent.InputTuple,
      FeeAddedEvent.OutputTuple,
      FeeAddedEvent.OutputObject
    >;
    FeeAdded: TypedContractEvent<
      FeeAddedEvent.InputTuple,
      FeeAddedEvent.OutputTuple,
      FeeAddedEvent.OutputObject
    >;

    "FeeRemoved(bytes32)": TypedContractEvent<
      FeeRemovedEvent.InputTuple,
      FeeRemovedEvent.OutputTuple,
      FeeRemovedEvent.OutputObject
    >;
    FeeRemoved: TypedContractEvent<
      FeeRemovedEvent.InputTuple,
      FeeRemovedEvent.OutputTuple,
      FeeRemovedEvent.OutputObject
    >;

    "FeeUpdated(bytes32,uint256,address)": TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;
    FeeUpdated: TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;

    "FeesProcessed(uint256,tuple)": TypedContractEvent<
      FeesProcessedEvent.InputTuple,
      FeesProcessedEvent.OutputTuple,
      FeesProcessedEvent.OutputObject
    >;
    FeesProcessed: TypedContractEvent<
      FeesProcessedEvent.InputTuple,
      FeesProcessedEvent.OutputTuple,
      FeesProcessedEvent.OutputObject
    >;

    "FiatFeePercentageUpdated(uint256,uint256)": TypedContractEvent<
      FiatFeePercentageUpdatedEvent.InputTuple,
      FiatFeePercentageUpdatedEvent.OutputTuple,
      FiatFeePercentageUpdatedEvent.OutputObject
    >;
    FiatFeePercentageUpdated: TypedContractEvent<
      FiatFeePercentageUpdatedEvent.InputTuple,
      FiatFeePercentageUpdatedEvent.OutputTuple,
      FiatFeePercentageUpdatedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MembershipFeesUpdated(uint256,uint256,uint256)": TypedContractEvent<
      MembershipFeesUpdatedEvent.InputTuple,
      MembershipFeesUpdatedEvent.OutputTuple,
      MembershipFeesUpdatedEvent.OutputObject
    >;
    MembershipFeesUpdated: TypedContractEvent<
      MembershipFeesUpdatedEvent.InputTuple,
      MembershipFeesUpdatedEvent.OutputTuple,
      MembershipFeesUpdatedEvent.OutputObject
    >;

    "NonceUsed(address,uint256)": TypedContractEvent<
      NonceUsedEvent.InputTuple,
      NonceUsedEvent.OutputTuple,
      NonceUsedEvent.OutputObject
    >;
    NonceUsed: TypedContractEvent<
      NonceUsedEvent.InputTuple,
      NonceUsedEvent.OutputTuple,
      NonceUsedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PaymentProcessed(address,address,uint256)": TypedContractEvent<
      PaymentProcessedEvent.InputTuple,
      PaymentProcessedEvent.OutputTuple,
      PaymentProcessedEvent.OutputObject
    >;
    PaymentProcessed: TypedContractEvent<
      PaymentProcessedEvent.InputTuple,
      PaymentProcessedEvent.OutputTuple,
      PaymentProcessedEvent.OutputObject
    >;

    "RolesSet(address)": TypedContractEvent<
      RolesSetEvent.InputTuple,
      RolesSetEvent.OutputTuple,
      RolesSetEvent.OutputObject
    >;
    RolesSet: TypedContractEvent<
      RolesSetEvent.InputTuple,
      RolesSetEvent.OutputTuple,
      RolesSetEvent.OutputObject
    >;

    "Send(address,address,uint256)": TypedContractEvent<
      SendEvent.InputTuple,
      SendEvent.OutputTuple,
      SendEvent.OutputObject
    >;
    Send: TypedContractEvent<
      SendEvent.InputTuple,
      SendEvent.OutputTuple,
      SendEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
