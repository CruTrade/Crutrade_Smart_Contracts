/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface MembershipsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "getDomainSeparator"
      | "getMembership"
      | "getMemberships"
      | "getNonce"
      | "initialize"
      | "pause"
      | "paused"
      | "proxiableUUID"
      | "revokeMembership"
      | "setMemberships"
      | "setRoles"
      | "unpause"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "Joined"
      | "MembershipRevoked"
      | "MembershipUpdated"
      | "NonceUsed"
      | "Paused"
      | "RolesSet"
      | "Unpaused"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMembership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMemberships",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeMembership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMemberships",
    values: [AddressLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoles",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDomainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMemberships",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMemberships",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRoles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JoinedEvent {
  export type InputTuple = [members: AddressLike[], membershipId: BigNumberish];
  export type OutputTuple = [members: string[], membershipId: bigint];
  export interface OutputObject {
    members: string[];
    membershipId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MembershipRevokedEvent {
  export type InputTuple = [member: AddressLike, membershipId: BigNumberish];
  export type OutputTuple = [member: string, membershipId: bigint];
  export interface OutputObject {
    member: string;
    membershipId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MembershipUpdatedEvent {
  export type InputTuple = [
    member: AddressLike,
    oldId: BigNumberish,
    newId: BigNumberish
  ];
  export type OutputTuple = [member: string, oldId: bigint, newId: bigint];
  export interface OutputObject {
    member: string;
    oldId: bigint;
    newId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NonceUsedEvent {
  export type InputTuple = [user: AddressLike, nonce: BigNumberish];
  export type OutputTuple = [user: string, nonce: bigint];
  export interface OutputObject {
    user: string;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RolesSetEvent {
  export type InputTuple = [roles: AddressLike];
  export type OutputTuple = [roles: string];
  export interface OutputObject {
    roles: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Memberships extends BaseContract {
  connect(runner?: ContractRunner | null): Memberships;
  waitForDeployment(): Promise<this>;

  interface: MembershipsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  getDomainSeparator: TypedContractMethod<[], [string], "view">;

  getMembership: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  getMemberships: TypedContractMethod<
    [accounts: AddressLike[]],
    [bigint[]],
    "view"
  >;

  getNonce: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  initialize: TypedContractMethod<[_roles: AddressLike], [void], "nonpayable">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  revokeMembership: TypedContractMethod<
    [member: AddressLike],
    [void],
    "nonpayable"
  >;

  setMemberships: TypedContractMethod<
    [members: AddressLike[], id: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRoles: TypedContractMethod<[_roles: AddressLike], [void], "nonpayable">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getDomainSeparator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getMembership"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMemberships"
  ): TypedContractMethod<[accounts: AddressLike[]], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getNonce"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_roles: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "revokeMembership"
  ): TypedContractMethod<[member: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMemberships"
  ): TypedContractMethod<
    [members: AddressLike[], id: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRoles"
  ): TypedContractMethod<[_roles: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Joined"
  ): TypedContractEvent<
    JoinedEvent.InputTuple,
    JoinedEvent.OutputTuple,
    JoinedEvent.OutputObject
  >;
  getEvent(
    key: "MembershipRevoked"
  ): TypedContractEvent<
    MembershipRevokedEvent.InputTuple,
    MembershipRevokedEvent.OutputTuple,
    MembershipRevokedEvent.OutputObject
  >;
  getEvent(
    key: "MembershipUpdated"
  ): TypedContractEvent<
    MembershipUpdatedEvent.InputTuple,
    MembershipUpdatedEvent.OutputTuple,
    MembershipUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "NonceUsed"
  ): TypedContractEvent<
    NonceUsedEvent.InputTuple,
    NonceUsedEvent.OutputTuple,
    NonceUsedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RolesSet"
  ): TypedContractEvent<
    RolesSetEvent.InputTuple,
    RolesSetEvent.OutputTuple,
    RolesSetEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Joined(address[],uint256)": TypedContractEvent<
      JoinedEvent.InputTuple,
      JoinedEvent.OutputTuple,
      JoinedEvent.OutputObject
    >;
    Joined: TypedContractEvent<
      JoinedEvent.InputTuple,
      JoinedEvent.OutputTuple,
      JoinedEvent.OutputObject
    >;

    "MembershipRevoked(address,uint256)": TypedContractEvent<
      MembershipRevokedEvent.InputTuple,
      MembershipRevokedEvent.OutputTuple,
      MembershipRevokedEvent.OutputObject
    >;
    MembershipRevoked: TypedContractEvent<
      MembershipRevokedEvent.InputTuple,
      MembershipRevokedEvent.OutputTuple,
      MembershipRevokedEvent.OutputObject
    >;

    "MembershipUpdated(address,uint256,uint256)": TypedContractEvent<
      MembershipUpdatedEvent.InputTuple,
      MembershipUpdatedEvent.OutputTuple,
      MembershipUpdatedEvent.OutputObject
    >;
    MembershipUpdated: TypedContractEvent<
      MembershipUpdatedEvent.InputTuple,
      MembershipUpdatedEvent.OutputTuple,
      MembershipUpdatedEvent.OutputObject
    >;

    "NonceUsed(address,uint256)": TypedContractEvent<
      NonceUsedEvent.InputTuple,
      NonceUsedEvent.OutputTuple,
      NonceUsedEvent.OutputObject
    >;
    NonceUsed: TypedContractEvent<
      NonceUsedEvent.InputTuple,
      NonceUsedEvent.OutputTuple,
      NonceUsedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RolesSet(address)": TypedContractEvent<
      RolesSetEvent.InputTuple,
      RolesSetEvent.OutputTuple,
      RolesSetEvent.OutputObject
    >;
    RolesSet: TypedContractEvent<
      RolesSetEvent.InputTuple,
      RolesSetEvent.OutputTuple,
      RolesSetEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
