/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type { Payments, PaymentsInterface } from "../Payments";

const _abi = [
  {
    type: "constructor",
    inputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "UPGRADE_INTERFACE_VERSION",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "addFee",
    inputs: [
      {
        name: "name",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "percentage",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "wallet",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getDomainSeparator",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getFee",
    inputs: [
      {
        name: "name",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct IPayments.Fee",
        components: [
          {
            name: "name",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "percentage",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "wallet",
            type: "address",
            internalType: "address",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getFees",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "tuple[]",
        internalType: "struct IPayments.Fee[]",
        components: [
          {
            name: "name",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "percentage",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "wallet",
            type: "address",
            internalType: "address",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getMembershipFees",
    inputs: [
      {
        name: "membershipId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "sellerFee",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "buyerFee",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getNonce",
    inputs: [
      {
        name: "user",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "initialize",
    inputs: [
      {
        name: "_roles",
        type: "address",
        internalType: "address",
      },
      {
        name: "_treasuryAddress",
        type: "address",
        internalType: "address",
      },
      {
        name: "_fiatFeePercentage",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_initialMembershipFees",
        type: "tuple[]",
        internalType: "struct IPayments.MembershipFeeConfig[]",
        components: [
          {
            name: "membershipId",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "sellerFee",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "buyerFee",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "pause",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "paused",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "proxiableUUID",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "removeFee",
    inputs: [
      {
        name: "name",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "send",
    inputs: [
      {
        name: "nonce",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "expiry",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "signature",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "erc20",
        type: "address",
        internalType: "address",
      },
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setFiatFeePercentage",
    inputs: [
      {
        name: "newPercentage",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setMembershipFees",
    inputs: [
      {
        name: "membershipId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "sellerFee",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "buyerFee",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setServiceFee",
    inputs: [
      {
        name: "operation",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "fee",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "splitFees",
    inputs: [
      {
        name: "erc20",
        type: "address",
        internalType: "address",
      },
      {
        name: "transactionId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct IPayments.TransactionFees",
        components: [
          {
            name: "fromFee",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "toFee",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "serviceFee",
            type: "tuple",
            internalType: "struct IPayments.ServiceFee",
            components: [
              {
                name: "operation",
                type: "bytes32",
                internalType: "bytes32",
              },
              {
                name: "serviceFees",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "fiatFees",
                type: "uint256",
                internalType: "uint256",
              },
            ],
          },
          {
            name: "fees",
            type: "tuple[]",
            internalType: "struct IPayments.Fee[]",
            components: [
              {
                name: "name",
                type: "bytes32",
                internalType: "bytes32",
              },
              {
                name: "percentage",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "wallet",
                type: "address",
                internalType: "address",
              },
            ],
          },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "splitServiceFee",
    inputs: [
      {
        name: "operation",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "wallet",
        type: "address",
        internalType: "address",
      },
      {
        name: "erc20",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct IPayments.ServiceFee",
        components: [
          {
            name: "operation",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "serviceFees",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "fiatFees",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "unpause",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "updateFee",
    inputs: [
      {
        name: "name",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "percentage",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "wallet",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "updateTreasuryAddress",
    inputs: [
      {
        name: "newTreasuryAddress",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "upgradeToAndCall",
    inputs: [
      {
        name: "newImplementation",
        type: "address",
        internalType: "address",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "event",
    name: "FeeAdded",
    inputs: [
      {
        name: "name",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "percentage",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "wallet",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "FeeRemoved",
    inputs: [
      {
        name: "name",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "FeeUpdated",
    inputs: [
      {
        name: "name",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "percentage",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "wallet",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "FeesProcessed",
    inputs: [
      {
        name: "transactionId",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
      {
        name: "fees",
        type: "tuple",
        indexed: false,
        internalType: "struct IPayments.TransactionFees",
        components: [
          {
            name: "fromFee",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "toFee",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "serviceFee",
            type: "tuple",
            internalType: "struct IPayments.ServiceFee",
            components: [
              {
                name: "operation",
                type: "bytes32",
                internalType: "bytes32",
              },
              {
                name: "serviceFees",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "fiatFees",
                type: "uint256",
                internalType: "uint256",
              },
            ],
          },
          {
            name: "fees",
            type: "tuple[]",
            internalType: "struct IPayments.Fee[]",
            components: [
              {
                name: "name",
                type: "bytes32",
                internalType: "bytes32",
              },
              {
                name: "percentage",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "wallet",
                type: "address",
                internalType: "address",
              },
            ],
          },
        ],
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "FiatFeePercentageUpdated",
    inputs: [
      {
        name: "oldPercentage",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "newPercentage",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Initialized",
    inputs: [
      {
        name: "version",
        type: "uint64",
        indexed: false,
        internalType: "uint64",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "MembershipFeesUpdated",
    inputs: [
      {
        name: "membershipId",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
      {
        name: "sellerFee",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "buyerFee",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "NonceUsed",
    inputs: [
      {
        name: "user",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "nonce",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Paused",
    inputs: [
      {
        name: "account",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "PaymentProcessed",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "RolesSet",
    inputs: [
      {
        name: "roles",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Send",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Unpaused",
    inputs: [
      {
        name: "account",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Upgraded",
    inputs: [
      {
        name: "implementation",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "AddressEmptyCode",
    inputs: [
      {
        name: "target",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "AddressInsufficientBalance",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "DuplicateFee",
    inputs: [
      {
        name: "name",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
  },
  {
    type: "error",
    name: "ECDSAInvalidSignature",
    inputs: [],
  },
  {
    type: "error",
    name: "ECDSAInvalidSignatureLength",
    inputs: [
      {
        name: "length",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "ECDSAInvalidSignatureS",
    inputs: [
      {
        name: "s",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
  },
  {
    type: "error",
    name: "ERC1967InvalidImplementation",
    inputs: [
      {
        name: "implementation",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "ERC1967NonPayable",
    inputs: [],
  },
  {
    type: "error",
    name: "EnforcedPause",
    inputs: [],
  },
  {
    type: "error",
    name: "ExpectedPause",
    inputs: [],
  },
  {
    type: "error",
    name: "FailedInnerCall",
    inputs: [],
  },
  {
    type: "error",
    name: "FeeNotFound",
    inputs: [
      {
        name: "name",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
  },
  {
    type: "error",
    name: "HashAlreadyUsed",
    inputs: [
      {
        name: "hash",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
  },
  {
    type: "error",
    name: "InsufficientPayment",
    inputs: [
      {
        name: "required",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "provided",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "InvalidBrand",
    inputs: [
      {
        name: "brandId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "InvalidInitialization",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidNonce",
    inputs: [
      {
        name: "expected",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "provided",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "InvalidPaymentToken",
    inputs: [
      {
        name: "token",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "InvalidPercentage",
    inputs: [
      {
        name: "percentage",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "InvalidSignature",
    inputs: [
      {
        name: "expected",
        type: "address",
        internalType: "address",
      },
      {
        name: "actual",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "InvalidTokenAddress",
    inputs: [],
  },
  {
    type: "error",
    name: "NotAllowed",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "account",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "NotAllowedDelegate",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "NotInitializing",
    inputs: [],
  },
  {
    type: "error",
    name: "NotOwner",
    inputs: [
      {
        name: "claimer",
        type: "address",
        internalType: "address",
      },
      {
        name: "actualOwner",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "NotWhitelisted",
    inputs: [
      {
        name: "wallet",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "PaymentFailed",
    inputs: [
      {
        name: "token",
        type: "address",
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "PaymentNotAllowed",
    inputs: [
      {
        name: "payment",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "SafeERC20FailedOperation",
    inputs: [
      {
        name: "token",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "SignatureExpired",
    inputs: [
      {
        name: "expiry",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "current",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "TotalPercentageExceedsLimit",
    inputs: [],
  },
  {
    type: "error",
    name: "TransferFailed",
    inputs: [],
  },
  {
    type: "error",
    name: "UUPSUnauthorizedCallContext",
    inputs: [],
  },
  {
    type: "error",
    name: "UUPSUnsupportedProxiableUUID",
    inputs: [
      {
        name: "slot",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
  },
  {
    type: "error",
    name: "ZeroAddress",
    inputs: [],
  },
] as const;

export class Payments__factory {
  static readonly abi = _abi;
  static createInterface(): PaymentsInterface {
    return new Interface(_abi) as PaymentsInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Payments {
    return new Contract(address, _abi, runner) as unknown as Payments;
  }
}
